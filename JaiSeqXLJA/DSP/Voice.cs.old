using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SharpDX.XAudio2;
using SharpDX.Multimedia;
using SharpDX.XAPO.Fx;
using System.IO;

namespace XAYRGA.SharpSL
{
    public class SoundEffectInstance : IDisposable
    {
        private AudioBuffer sBuffer;

        private float iPitch = 0;
        private float iVolume = 1;

        private WaveFormat fmt;
        private SourceVoice svoice;
        private SubmixVoice myMixer;

        private Reverb voiceRev; 
      

        bool playing = false;

        public SoundEffectInstance(AudioBuffer bdata, WaveFormat wft, SubmixVoice mix)
        {
            fmt = wft;
            sBuffer = bdata;
            voiceRev = new Reverb(SharpSLEngine.GetEngineBase());
            var dsc = new EffectDescriptor(voiceRev);
    
            svoice = new SourceVoice(SharpSLEngine.GetEngineBase(), fmt, VoiceFlags.None, 1024f);
            svoice.SetEffectChain(dsc); 

            svoice.SubmitSourceBuffer(sBuffer, null);                       
            myMixer = mix;
            svoice.SetOutputVoices(new VoiceSendDescriptor(myMixer));

   
            var efp = svoice.GetEffectParameters<ReverbParameters>(0);
            efp.RoomSize = 0.8f;
            svoice.SetEffectParameters(0, efp);
            Console.WriteLine(voiceRev.Parameter.Diffusion);
            Console.WriteLine(voiceRev.Parameter.RoomSize);
        }

        public void Play()
        {
            playing = true;
            svoice.Start();
        }

        public void Stop()
        {
            playing = false;
            svoice.Stop();
        }

        

        public float Pitch
        {
            get
            {
                return iPitch;
            }
            set
            {
                svoice.SetFrequencyRatio(value);
                iPitch = value;
            }
        }


        public float Volume
        {
            get
            {
                return iVolume;
            }
            set
            {
                svoice.SetVolume(value);
                iVolume = value;
            }
        }

        public void Dispose()
        {
            svoice.Dispose();
        }

        ~SoundEffectInstance()
        {
            Dispose();
        }
    }
}
